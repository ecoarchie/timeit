// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: waves.sql

package database

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const addOrUpdateWave = `-- name: AddOrUpdateWave :one
INSERT INTO waves
(id, race_id, event_id, "name", start_time, is_launched)
VALUES($1, $2, $3, $4, $5, $6)
ON CONFLICT (race_id, event_id, id)
DO UPDATE
SET "name"=EXCLUDED."name", start_time=EXCLUDED.start_time, is_launched=EXCLUDED.is_launched
RETURNING id, race_id, event_id, name, start_time, is_launched
`

type AddOrUpdateWaveParams struct {
	ID         uuid.UUID
	RaceID     uuid.UUID
	EventID    uuid.UUID
	Name       string
	StartTime  pgtype.Timestamptz
	IsLaunched bool
}

func (q *Queries) AddOrUpdateWave(ctx context.Context, arg AddOrUpdateWaveParams) (Wave, error) {
	row := q.db.QueryRow(ctx, addOrUpdateWave,
		arg.ID,
		arg.RaceID,
		arg.EventID,
		arg.Name,
		arg.StartTime,
		arg.IsLaunched,
	)
	var i Wave
	err := row.Scan(
		&i.ID,
		&i.RaceID,
		&i.EventID,
		&i.Name,
		&i.StartTime,
		&i.IsLaunched,
	)
	return i, err
}

const deleteWaveByID = `-- name: DeleteWaveByID :exec
DELETE FROM waves
WHERE id=$1
`

func (q *Queries) DeleteWaveByID(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteWaveByID, id)
	return err
}

const getAllWavesForEvent = `-- name: GetAllWavesForEvent :many
SELECT id, race_id, event_id, "name", start_time, is_launched
FROM waves
WHERE event_id=$1
ORDER BY start_time ASC
`

func (q *Queries) GetAllWavesForEvent(ctx context.Context, eventID uuid.UUID) ([]Wave, error) {
	rows, err := q.db.Query(ctx, getAllWavesForEvent, eventID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Wave
	for rows.Next() {
		var i Wave
		if err := rows.Scan(
			&i.ID,
			&i.RaceID,
			&i.EventID,
			&i.Name,
			&i.StartTime,
			&i.IsLaunched,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const startWave = `-- name: StartWave :exec
UPDATE waves
SET is_launched=true
WHERE id=$1
`

func (q *Queries) StartWave(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, startWave, id)
	return err
}
