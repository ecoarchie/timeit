// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: copyfrom.go

package database

import (
	"context"
)

// iteratorForAddChipBibBulk implements pgx.CopyFromSource.
type iteratorForAddChipBibBulk struct {
	rows                 []AddChipBibBulkParams
	skippedFirstNextCall bool
}

func (r *iteratorForAddChipBibBulk) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForAddChipBibBulk) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].RaceID,
		r.rows[0].EventID,
		r.rows[0].Chip,
		r.rows[0].Bib,
	}, nil
}

func (r iteratorForAddChipBibBulk) Err() error {
	return nil
}

func (q *Queries) AddChipBibBulk(ctx context.Context, arg []AddChipBibBulkParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"chip_bib"}, []string{"race_id", "event_id", "chip", "bib"}, &iteratorForAddChipBibBulk{rows: arg})
}

// iteratorForAddEventAthleteBulk implements pgx.CopyFromSource.
type iteratorForAddEventAthleteBulk struct {
	rows                 []AddEventAthleteBulkParams
	skippedFirstNextCall bool
}

func (r *iteratorForAddEventAthleteBulk) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForAddEventAthleteBulk) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].RaceID,
		r.rows[0].EventID,
		r.rows[0].AthleteID,
		r.rows[0].WaveID,
		r.rows[0].CategoryID,
		r.rows[0].Bib,
	}, nil
}

func (r iteratorForAddEventAthleteBulk) Err() error {
	return nil
}

func (q *Queries) AddEventAthleteBulk(ctx context.Context, arg []AddEventAthleteBulkParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"event_athlete"}, []string{"race_id", "event_id", "athlete_id", "wave_id", "category_id", "bib"}, &iteratorForAddEventAthleteBulk{rows: arg})
}

// iteratorForCreateAthleteBulk implements pgx.CopyFromSource.
type iteratorForCreateAthleteBulk struct {
	rows                 []CreateAthleteBulkParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateAthleteBulk) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateAthleteBulk) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].ID,
		r.rows[0].RaceID,
		r.rows[0].FirstName,
		r.rows[0].LastName,
		r.rows[0].Gender,
		r.rows[0].DateOfBirth,
		r.rows[0].Phone,
		r.rows[0].AthleteComments,
	}, nil
}

func (r iteratorForCreateAthleteBulk) Err() error {
	return nil
}

func (q *Queries) CreateAthleteBulk(ctx context.Context, arg []CreateAthleteBulkParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"athletes"}, []string{"id", "race_id", "first_name", "last_name", "gender", "date_of_birth", "phone", "athlete_comments"}, &iteratorForCreateAthleteBulk{rows: arg})
}
