// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: copyfrom.go

package database

import (
	"context"
)

// iteratorForCreateAthleteSplits implements pgx.CopyFromSource.
type iteratorForCreateAthleteSplits struct {
	rows                 []CreateAthleteSplitsParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateAthleteSplits) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateAthleteSplits) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].RaceID,
		r.rows[0].EventID,
		r.rows[0].SplitID,
		r.rows[0].AthleteID,
		r.rows[0].Tod,
		r.rows[0].GunTime,
		r.rows[0].NetTime,
	}, nil
}

func (r iteratorForCreateAthleteSplits) Err() error {
	return nil
}

func (q *Queries) CreateAthleteSplits(ctx context.Context, arg []CreateAthleteSplitsParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"athlete_split"}, []string{"race_id", "event_id", "split_id", "athlete_id", "tod", "gun_time", "net_time"}, &iteratorForCreateAthleteSplits{rows: arg})
}
