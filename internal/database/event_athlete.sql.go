// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: event_athlete.sql

package database

import (
	"context"

	"github.com/ecoarchie/timeit/internal/entity"
	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const addEventAthlete = `-- name: AddEventAthlete :one
INSERT INTO event_athlete
(race_id, event_id, athlete_id, wave_id, category_id, bib)
VALUES ($1, $2, $3, $4, $5, $6)
ON CONFLICT (race_id, event_id, athlete_id)
DO UPDATE
SET event_id=EXCLUDED.event_id, wave_id=EXCLUDED.wave_id, category_id=EXCLUDED.category_id, bib=EXCLUDED.bib 
RETURNING race_id, event_id, athlete_id, wave_id, category_id, bib, status_id
`

type AddEventAthleteParams struct {
	RaceID     uuid.UUID
	EventID    uuid.UUID
	AthleteID  uuid.UUID
	WaveID     uuid.UUID
	CategoryID uuid.NullUUID
	Bib        int32
}

func (q *Queries) AddEventAthlete(ctx context.Context, arg AddEventAthleteParams) (EventAthlete, error) {
	row := q.db.QueryRow(ctx, addEventAthlete,
		arg.RaceID,
		arg.EventID,
		arg.AthleteID,
		arg.WaveID,
		arg.CategoryID,
		arg.Bib,
	)
	var i EventAthlete
	err := row.Scan(
		&i.RaceID,
		&i.EventID,
		&i.AthleteID,
		&i.WaveID,
		&i.CategoryID,
		&i.Bib,
		&i.StatusID,
	)
	return i, err
}

type AddEventAthleteBulkParams struct {
	RaceID     uuid.UUID
	EventID    uuid.UUID
	AthleteID  uuid.UUID
	WaveID     uuid.UUID
	CategoryID uuid.NullUUID
	Bib        int32
}

const getEventAthlete = `-- name: GetEventAthlete :one
SELECT race_id, event_id, athlete_id, wave_id, category_id, bib, status_id
FROM event_athlete
WHERE athlete_id=$1
`

func (q *Queries) GetEventAthlete(ctx context.Context, athleteID uuid.UUID) (EventAthlete, error) {
	row := q.db.QueryRow(ctx, getEventAthlete, athleteID)
	var i EventAthlete
	err := row.Scan(
		&i.RaceID,
		&i.EventID,
		&i.AthleteID,
		&i.WaveID,
		&i.CategoryID,
		&i.Bib,
		&i.StatusID,
	)
	return i, err
}

const getEventAthleteRecordsC = `-- name: GetEventAthleteRecordsC :many
select 
	ea.athlete_id,
	ea.bib,
	cb.chip,
	ea.category_id,
	a.gender,
	s.status_full,
	w.start_time as wave_start,
	(select array_agg(row(tr.id, rr.tod)::rr_tod order by rr.tod)::rr_tod[]
	from
		reader_records rr
	join time_readers tr on
		tr.reader_name = rr.reader_name
		and tr.race_id = rr.race_id
	where
		rr.race_id = ea.race_id
		and rr.chip = cb.chip
		and rr.can_use is true) as rr_tod
	from event_athlete ea
	join statuses s on ea.status_id = s.status_id
	join waves w on w.race_id = ea.race_id and w.event_id = ea.event_id  and w.id = ea.wave_id
	join chip_bib cb on cb.race_id = ea.race_id and cb.event_id = ea.event_id and cb.bib = ea.bib
	join athletes a on a.id = ea.athlete_id and a.race_id = ea.race_id
	where ea.race_id = $1 
		and ea.event_id = $2 
		and w.is_launched is true
`

type GetEventAthleteRecordsCParams struct {
	RaceID  uuid.UUID
	EventID uuid.UUID
}

type GetEventAthleteRecordsCRow struct {
	AthleteID  uuid.UUID
	Bib        int32
	Chip       int32
	CategoryID uuid.NullUUID
	Gender     CategoryGender
	StatusFull string
	WaveStart  pgtype.Timestamp
	RrTod      []entity.RecordTOD
}

func (q *Queries) GetEventAthleteRecordsC(ctx context.Context, arg GetEventAthleteRecordsCParams) ([]GetEventAthleteRecordsCRow, error) {
	rows, err := q.db.Query(ctx, getEventAthleteRecordsC, arg.RaceID, arg.EventID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetEventAthleteRecordsCRow
	for rows.Next() {
		var i GetEventAthleteRecordsCRow
		if err := rows.Scan(
			&i.AthleteID,
			&i.Bib,
			&i.Chip,
			&i.CategoryID,
			&i.Gender,
			&i.StatusFull,
			&i.WaveStart,
			&i.RrTod,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setStatus = `-- name: SetStatus :exec
UPDATE event_athlete
SET status_id = $1
WHERE athlete_id = $2 AND race_id = $3 AND event_id = $4
`

type SetStatusParams struct {
	StatusID  pgtype.Int4
	AthleteID uuid.UUID
	RaceID    uuid.UUID
	EventID   uuid.UUID
}

func (q *Queries) SetStatus(ctx context.Context, arg SetStatusParams) error {
	_, err := q.db.Exec(ctx, setStatus,
		arg.StatusID,
		arg.AthleteID,
		arg.RaceID,
		arg.EventID,
	)
	return err
}
