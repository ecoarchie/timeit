// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: event_athlete.sql

package database

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const addEventAthlete = `-- name: AddEventAthlete :one
INSERT INTO event_athlete
(race_id, event_id, athlete_id, wave_id, category_id, bib)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING race_id, event_id, athlete_id, wave_id, category_id, bib
`

type AddEventAthleteParams struct {
	RaceID     uuid.UUID
	EventID    uuid.UUID
	AthleteID  uuid.UUID
	WaveID     uuid.UUID
	CategoryID uuid.NullUUID
	Bib        pgtype.Int4
}

func (q *Queries) AddEventAthlete(ctx context.Context, arg AddEventAthleteParams) (EventAthlete, error) {
	row := q.db.QueryRow(ctx, addEventAthlete,
		arg.RaceID,
		arg.EventID,
		arg.AthleteID,
		arg.WaveID,
		arg.CategoryID,
		arg.Bib,
	)
	var i EventAthlete
	err := row.Scan(
		&i.RaceID,
		&i.EventID,
		&i.AthleteID,
		&i.WaveID,
		&i.CategoryID,
		&i.Bib,
	)
	return i, err
}

const deleteEventAthlete = `-- name: DeleteEventAthlete :exec
DELETE FROM event_athlete
WHERE race_id = $1 AND athlete_id = $2
`

type DeleteEventAthleteParams struct {
	RaceID    uuid.UUID
	AthleteID uuid.UUID
}

func (q *Queries) DeleteEventAthlete(ctx context.Context, arg DeleteEventAthleteParams) error {
	_, err := q.db.Exec(ctx, deleteEventAthlete, arg.RaceID, arg.AthleteID)
	return err
}

const getEventAthlete = `-- name: GetEventAthlete :one
SELECT race_id, event_id, athlete_id, wave_id, category_id, bib
FROM event_athlete
WHERE athlete_id=$1
`

func (q *Queries) GetEventAthlete(ctx context.Context, athleteID uuid.UUID) (EventAthlete, error) {
	row := q.db.QueryRow(ctx, getEventAthlete, athleteID)
	var i EventAthlete
	err := row.Scan(
		&i.RaceID,
		&i.EventID,
		&i.AthleteID,
		&i.WaveID,
		&i.CategoryID,
		&i.Bib,
	)
	return i, err
}
