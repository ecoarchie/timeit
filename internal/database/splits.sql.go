// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: splits.sql

package database

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const addOrUpdateSplit = `-- name: AddOrUpdateSplit :one
INSERT INTO splits
(id, race_id, event_id, split_name, split_type, distance_from_start, time_reader_id, min_time, max_time, min_lap_time)
VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
ON CONFLICT (race_id, event_id, id)
DO UPDATE
SET split_name=EXCLUDED.split_name, split_type=EXCLUDED. split_type, distance_from_start=EXCLUDED.distance_from_start, time_reader_id=EXCLUDED.time_reader_id, min_time=EXCLUDED.min_time, max_time=EXCLUDED.max_time, min_lap_time=EXCLUDED.min_lap_time
RETURNING id, race_id, event_id, split_name, split_type, distance_from_start, time_reader_id, min_time, max_time, min_lap_time, previous_lap_split_id
`

type AddOrUpdateSplitParams struct {
	ID                uuid.UUID
	RaceID            uuid.UUID
	EventID           uuid.UUID
	SplitName         string
	SplitType         TpType
	DistanceFromStart int32
	TimeReaderID      uuid.UUID
	MinTime           pgtype.Interval
	MaxTime           pgtype.Interval
	MinLapTime        pgtype.Interval
}

func (q *Queries) AddOrUpdateSplit(ctx context.Context, arg AddOrUpdateSplitParams) (Split, error) {
	row := q.db.QueryRow(ctx, addOrUpdateSplit,
		arg.ID,
		arg.RaceID,
		arg.EventID,
		arg.SplitName,
		arg.SplitType,
		arg.DistanceFromStart,
		arg.TimeReaderID,
		arg.MinTime,
		arg.MaxTime,
		arg.MinLapTime,
	)
	var i Split
	err := row.Scan(
		&i.ID,
		&i.RaceID,
		&i.EventID,
		&i.SplitName,
		&i.SplitType,
		&i.DistanceFromStart,
		&i.TimeReaderID,
		&i.MinTime,
		&i.MaxTime,
		&i.MinLapTime,
		&i.PreviousLapSplitID,
	)
	return i, err
}

const deleteSplitByID = `-- name: DeleteSplitByID :exec
DELETE FROM splits
WHERE id=$1
`

func (q *Queries) DeleteSplitByID(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteSplitByID, id)
	return err
}

const getSplitsForEvent = `-- name: GetSplitsForEvent :many
SELECT id, race_id, event_id, split_name, split_type, distance_from_start, time_reader_id, min_time, max_time, min_lap_time, previous_lap_split_id
FROM splits
WHERE event_id=$1
ORDER BY distance_from_start ASC
`

func (q *Queries) GetSplitsForEvent(ctx context.Context, eventID uuid.UUID) ([]Split, error) {
	rows, err := q.db.Query(ctx, getSplitsForEvent, eventID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Split
	for rows.Next() {
		var i Split
		if err := rows.Scan(
			&i.ID,
			&i.RaceID,
			&i.EventID,
			&i.SplitName,
			&i.SplitType,
			&i.DistanceFromStart,
			&i.TimeReaderID,
			&i.MinTime,
			&i.MaxTime,
			&i.MinLapTime,
			&i.PreviousLapSplitID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSplitsForRace = `-- name: GetSplitsForRace :many
SELECT id, race_id, event_id, split_name, split_type, distance_from_start, time_reader_id, min_time, max_time, min_lap_time
FROM splits
WHERE race_id=$1
ORDER BY distance_from_start ASC
`

type GetSplitsForRaceRow struct {
	ID                uuid.UUID
	RaceID            uuid.UUID
	EventID           uuid.UUID
	SplitName         string
	SplitType         TpType
	DistanceFromStart int32
	TimeReaderID      uuid.UUID
	MinTime           pgtype.Interval
	MaxTime           pgtype.Interval
	MinLapTime        pgtype.Interval
}

func (q *Queries) GetSplitsForRace(ctx context.Context, raceID uuid.UUID) ([]GetSplitsForRaceRow, error) {
	rows, err := q.db.Query(ctx, getSplitsForRace, raceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetSplitsForRaceRow
	for rows.Next() {
		var i GetSplitsForRaceRow
		if err := rows.Scan(
			&i.ID,
			&i.RaceID,
			&i.EventID,
			&i.SplitName,
			&i.SplitType,
			&i.DistanceFromStart,
			&i.TimeReaderID,
			&i.MinTime,
			&i.MaxTime,
			&i.MinLapTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
