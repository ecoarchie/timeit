// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: splits.sql

package database

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const addOrUpdateSplit = `-- name: AddOrUpdateSplit :one
INSERT INTO splits
(id, race_id, event_id, split_name, split_type, distance_from_start, time_reader_id, min_time_sec, max_time_sec, min_lap_time_sec)
VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
ON CONFLICT (race_id, event_id, id)
DO UPDATE
SET split_name=EXCLUDED.split_name, split_type=EXCLUDED. split_type, distance_from_start=EXCLUDED.distance_from_start, time_reader_id=EXCLUDED.time_reader_id, min_time_sec=EXCLUDED.min_time_sec, max_time_sec=EXCLUDED.max_time_sec, min_lap_time_sec=EXCLUDED.min_lap_time_sec
RETURNING id, race_id, event_id, split_name, split_type, distance_from_start, time_reader_id, min_time_sec, max_time_sec, min_lap_time_sec
`

type AddOrUpdateSplitParams struct {
	ID                uuid.UUID
	RaceID            uuid.UUID
	EventID           uuid.UUID
	SplitName         string
	SplitType         TpType
	DistanceFromStart int32
	TimeReaderID      uuid.UUID
	MinTimeSec        pgtype.Int4
	MaxTimeSec        pgtype.Int4
	MinLapTimeSec     pgtype.Int4
}

func (q *Queries) AddOrUpdateSplit(ctx context.Context, arg AddOrUpdateSplitParams) (Split, error) {
	row := q.db.QueryRow(ctx, addOrUpdateSplit,
		arg.ID,
		arg.RaceID,
		arg.EventID,
		arg.SplitName,
		arg.SplitType,
		arg.DistanceFromStart,
		arg.TimeReaderID,
		arg.MinTimeSec,
		arg.MaxTimeSec,
		arg.MinLapTimeSec,
	)
	var i Split
	err := row.Scan(
		&i.ID,
		&i.RaceID,
		&i.EventID,
		&i.SplitName,
		&i.SplitType,
		&i.DistanceFromStart,
		&i.TimeReaderID,
		&i.MinTimeSec,
		&i.MaxTimeSec,
		&i.MinLapTimeSec,
	)
	return i, err
}

const deleteSplitByID = `-- name: DeleteSplitByID :exec
DELETE FROM splits
WHERE id=$1
`

func (q *Queries) DeleteSplitByID(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteSplitByID, id)
	return err
}

const getAllSplitsForEvent = `-- name: GetAllSplitsForEvent :many
SELECT 
(id, race_id, event_id, split_name, split_type, distance_from_start, time_reader_id, min_time_sec, max_time_sec, min_lap_time_sec)
FROM splits
WHERE event_id=$1
ORDER BY distance_from_start ASC
`

func (q *Queries) GetAllSplitsForEvent(ctx context.Context, eventID uuid.UUID) ([]interface{}, error) {
	rows, err := q.db.Query(ctx, getAllSplitsForEvent, eventID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []interface{}
	for rows.Next() {
		var column_1 interface{}
		if err := rows.Scan(&column_1); err != nil {
			return nil, err
		}
		items = append(items, column_1)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
