// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: categories.sql

package database

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const addOrUpdateCategory = `-- name: AddOrUpdateCategory :one
INSERT INTO categories
(id, race_id, event_id, category_name, gender, age_from, date_from, age_to, date_to)
VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9)
ON CONFLICT (id)
DO UPDATE
SET category_name=EXCLUDED. category_name, gender=EXCLUDED.gender, age_from=EXCLUDED.age_from, date_from=EXCLUDED.date_from, age_to=EXCLUDED.age_to, date_to=EXCLUDED.date_to
RETURNING id, race_id, event_id, category_name, gender, age_from, date_from, age_to, date_to
`

type AddOrUpdateCategoryParams struct {
	ID           uuid.UUID
	RaceID       uuid.UUID
	EventID      uuid.UUID
	CategoryName string
	Gender       CategoryGender
	AgeFrom      int32
	DateFrom     pgtype.Timestamp
	AgeTo        int32
	DateTo       pgtype.Timestamp
}

func (q *Queries) AddOrUpdateCategory(ctx context.Context, arg AddOrUpdateCategoryParams) (Category, error) {
	row := q.db.QueryRow(ctx, addOrUpdateCategory,
		arg.ID,
		arg.RaceID,
		arg.EventID,
		arg.CategoryName,
		arg.Gender,
		arg.AgeFrom,
		arg.DateFrom,
		arg.AgeTo,
		arg.DateTo,
	)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.RaceID,
		&i.EventID,
		&i.CategoryName,
		&i.Gender,
		&i.AgeFrom,
		&i.DateFrom,
		&i.AgeTo,
		&i.DateTo,
	)
	return i, err
}

const deleteCategoryByID = `-- name: DeleteCategoryByID :exec
DELETE FROM categories
WHERE id=$1
`

func (q *Queries) DeleteCategoryByID(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteCategoryByID, id)
	return err
}

const getCategoriesForEvent = `-- name: GetCategoriesForEvent :many
SELECT id, race_id, event_id, category_name, gender, age_from, date_from, age_to, date_to
FROM categories
WHERE event_id=$1
ORDER BY age_from ASC
`

func (q *Queries) GetCategoriesForEvent(ctx context.Context, eventID uuid.UUID) ([]Category, error) {
	rows, err := q.db.Query(ctx, getCategoriesForEvent, eventID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Category
	for rows.Next() {
		var i Category
		if err := rows.Scan(
			&i.ID,
			&i.RaceID,
			&i.EventID,
			&i.CategoryName,
			&i.Gender,
			&i.AgeFrom,
			&i.DateFrom,
			&i.AgeTo,
			&i.DateTo,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCategoryForAthlete = `-- name: GetCategoryForAthlete :one
SELECT id, race_id, event_id, category_name, gender, age_from, date_from, age_to, date_to
FROM categories
WHERE 
event_id = $1 
AND gender = $2 
AND $3 BETWEEN (date_to - (age_to || ' years')::INTERVAL) AND (date_from - (age_from || ' years')::INTERVAL)
`

type GetCategoryForAthleteParams struct {
	EventID uuid.UUID
	Gender  CategoryGender
	DateTo  pgtype.Timestamp
}

func (q *Queries) GetCategoryForAthlete(ctx context.Context, arg GetCategoryForAthleteParams) (Category, error) {
	row := q.db.QueryRow(ctx, getCategoryForAthlete, arg.EventID, arg.Gender, arg.DateTo)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.RaceID,
		&i.EventID,
		&i.CategoryName,
		&i.Gender,
		&i.AgeFrom,
		&i.DateFrom,
		&i.AgeTo,
		&i.DateTo,
	)
	return i, err
}
