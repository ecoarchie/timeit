// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: categories.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const addOrUpdateCategory = `-- name: AddOrUpdateCategory :one
INSERT INTO categories
(id, race_id, event_id, category_name, gender, from_age, from_race_date, to_age, to_race_date)
VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9)
ON CONFLICT (id)
DO UPDATE
SET category_name=EXCLUDED. category_name, gender=EXCLUDED.gender, from_age=EXCLUDED.from_age, from_race_date=EXCLUDED.from_race_date, to_age=EXCLUDED.to_age, to_race_date=EXCLUDED.to_race_date
RETURNING id, race_id, event_id, category_name, gender, from_age, from_race_date, to_age, to_race_date
`

type AddOrUpdateCategoryParams struct {
	ID           uuid.UUID
	RaceID       uuid.UUID
	EventID      uuid.UUID
	CategoryName string
	Gender       CategoryGender
	FromAge      int32
	FromRaceDate bool
	ToAge        int32
	ToRaceDate   bool
}

func (q *Queries) AddOrUpdateCategory(ctx context.Context, arg AddOrUpdateCategoryParams) (Category, error) {
	row := q.db.QueryRow(ctx, addOrUpdateCategory,
		arg.ID,
		arg.RaceID,
		arg.EventID,
		arg.CategoryName,
		arg.Gender,
		arg.FromAge,
		arg.FromRaceDate,
		arg.ToAge,
		arg.ToRaceDate,
	)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.RaceID,
		&i.EventID,
		&i.CategoryName,
		&i.Gender,
		&i.FromAge,
		&i.FromRaceDate,
		&i.ToAge,
		&i.ToRaceDate,
	)
	return i, err
}

const deleteCategoryByID = `-- name: DeleteCategoryByID :exec
DELETE FROM categories
WHERE id=$1
`

func (q *Queries) DeleteCategoryByID(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteCategoryByID, id)
	return err
}

const getCategoriesForEvent = `-- name: GetCategoriesForEvent :many
SELECT (id, race_id, event_id, category_name, gender, from_age, from_race_date, to_age, to_race_date)
FROM categories
WHERE event_id=$1
ORDER BY from_age ASC
`

func (q *Queries) GetCategoriesForEvent(ctx context.Context, eventID uuid.UUID) ([]interface{}, error) {
	rows, err := q.db.Query(ctx, getCategoriesForEvent, eventID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []interface{}
	for rows.Next() {
		var column_1 interface{}
		if err := rows.Scan(&column_1); err != nil {
			return nil, err
		}
		items = append(items, column_1)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
