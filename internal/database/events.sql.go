// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: events.sql

package database

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const addOrUpdateEvent = `-- name: AddOrUpdateEvent :one
INSERT INTO events
(id, race_id, "name", distance_in_meters, event_date)
VALUES($1, $2, $3, $4, $5)
ON CONFLICT (race_id, id) DO UPDATE
SET id=excluded.id, "name"=excluded."name", distance_in_meters=excluded.distance_in_meters, event_date=excluded.event_date
RETURNING id, race_id, name, distance_in_meters, event_date
`

type AddOrUpdateEventParams struct {
	ID               uuid.UUID
	RaceID           uuid.UUID
	Name             string
	DistanceInMeters int32
	EventDate        pgtype.Timestamptz
}

func (q *Queries) AddOrUpdateEvent(ctx context.Context, arg AddOrUpdateEventParams) (Event, error) {
	row := q.db.QueryRow(ctx, addOrUpdateEvent,
		arg.ID,
		arg.RaceID,
		arg.Name,
		arg.DistanceInMeters,
		arg.EventDate,
	)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.RaceID,
		&i.Name,
		&i.DistanceInMeters,
		&i.EventDate,
	)
	return i, err
}

const deleteEvent = `-- name: DeleteEvent :exec
DELETE FROM events
WHERE id=$1
`

func (q *Queries) DeleteEvent(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteEvent, id)
	return err
}

const getAllEventsForRace = `-- name: GetAllEventsForRace :many
SELECT id, race_id, "name", distance_in_meters, event_date
FROM events
WHERE race_id=$1
ORDER BY event_date ASC
`

func (q *Queries) GetAllEventsForRace(ctx context.Context, raceID uuid.UUID) ([]Event, error) {
	rows, err := q.db.Query(ctx, getAllEventsForRace, raceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Event
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.RaceID,
			&i.Name,
			&i.DistanceInMeters,
			&i.EventDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEventByID = `-- name: GetEventByID :one
SELECT id, race_id, "name", distance_in_meters, event_date
FROM events
WHERE id=$1
`

func (q *Queries) GetEventByID(ctx context.Context, id uuid.UUID) (Event, error) {
	row := q.db.QueryRow(ctx, getEventByID, id)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.RaceID,
		&i.Name,
		&i.DistanceInMeters,
		&i.EventDate,
	)
	return i, err
}
